<?xml version="1.0"?>
<testsuite name="Firefox 134.0 (Windows 10)" package="" timestamp="2025-01-09T11:01:26" id="0" hostname="LuizMG" tests="20" errors="0" failures="0" time="0.308">
  <properties>
    <property name="browser.fullName" value="Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:134.0) Gecko/20100101 Firefox/134.0"/>
  </properties>
  <testcase name="LoginService deve realizar signup com sucesso e navegar para o dashboard" time="0.021" classname="LoginService"/>
  <testcase name="LoginService deve lidar com erro no signup" time="0.014" classname="LoginService"/>
  <testcase name="LoginService deve exibir erro ao falhar no login" time="0.015" classname="LoginService"/>
  <testcase name="LoginService deve buscar userId se não existir e armazená-lo na sessão" time="0.017" classname="LoginService"/>
  <testcase name="LoginService deve realizar login com sucesso e navegar para o dashboard" time="0.014" classname="LoginService"/>
  <testcase name="LoginService deve buscar o ID de um usuário pelo nome" time="0.015" classname="LoginService"/>
  <testcase name="LoginService deve retornar null se o usuário não for encontrado pelo nome" time="0.015" classname="LoginService"/>
  <testcase name="LoginService deve buscar todos os usuários com sucesso" time="0.007" classname="LoginService"/>
  <testcase name="AppComponent should create the app" time="0.023" classname="AppComponent"/>
  <testcase name="ModalComponent should create" time="0.041" classname="ModalComponent"/>
  <testcase name="LoginService deve realizar login com sucesso e navegar para o dashboard" time="0.008" classname="LoginService"/>
  <testcase name="LoginService deve buscar o ID de um usuário pelo nome" time="0.011" classname="LoginService"/>
  <testcase name="LoginService deve retornar null se o usuário não for encontrado pelo nome" time="0.009" classname="LoginService"/>
  <testcase name="LoginService deve realizar signup com sucesso e navegar para o dashboard" time="0.005" classname="LoginService"/>
  <testcase name="LoginService deve exibir erro ao falhar no login" time="0.005" classname="LoginService"/>
  <testcase name="LoginService deve buscar todos os usuários com sucesso" time="0.005" classname="LoginService"/>
  <testcase name="LoginService deve lidar com erro no signup" time="0.008" classname="LoginService"/>
  <testcase name="PrimaryInputComponent should create" time="0.022" classname="PrimaryInputComponent"/>
  <testcase name="DefaultLoginLayoutComponent should create" time="0.02" classname="DefaultLoginLayoutComponent"/>
  <testcase name="SidebarComponent should create" time="0.033" classname="SidebarComponent"/>
  <system-out>
    <![CDATA[Firefox 134.0 (Windows 10) LOG: 'All test files loaded.'
,Firefox 134.0 (Windows 10) LOG: 'User ID saved:', '456'
,Firefox 134.0 (Windows 10) ERROR: 'Error during registration:', HttpErrorResponse{headers: HttpHeaders{normalizedNames: Map{}, lazyUpdate: null, headers: Map{}}, status: 500, statusText: 'Internal Server Error', url: 'https://universitysystem-7bcbdef4d122.herokuapp.com/api/v1/auth/register', ok: false, name: 'HttpErrorResponse', message: 'Http failure response for https://universitysystem-7bcbdef4d122.herokuapp.com/api/v1/auth/register: 500 Internal Server Error', error: 'Internal Server Error'}
,Firefox 134.0 (Windows 10) ERROR: 'Error during login:', HttpErrorResponse{headers: HttpHeaders{normalizedNames: Map{}, lazyUpdate: null, headers: Map{}}, status: 401, statusText: 'Unauthorized', url: 'https://universitysystem-7bcbdef4d122.herokuapp.com/api/v1/auth/login', ok: false, name: 'HttpErrorResponse', message: 'Http failure response for https://universitysystem-7bcbdef4d122.herokuapp.com/api/v1/auth/login: 401 Unauthorized', error: 'Unauthorized'}
,Firefox 134.0 (Windows 10) WARN: 'User ID not found in the response. Fetching from the user list...'
,Firefox 134.0 (Windows 10) LOG: 'Fetched Users from API:', [Object{id: '3', name: 'John Doe'}]
,Firefox 134.0 (Windows 10) LOG: 'User ID fetched and saved:', '3'
,Firefox 134.0 (Windows 10) LOG: 'User ID saved:', '123'
,Firefox 134.0 (Windows 10) LOG: 'Fetched User ID:', '2'
,Firefox 134.0 (Windows 10) LOG: 'Fetched User ID:', null
,Firefox 134.0 (Windows 10) LOG: 'Fetched Users from API:', [Object{id: '1', name: 'User One', email: 'user1@example.com'}, Object{id: '2', name: 'User Two', email: 'user2@example.com'}]
,Firefox 134.0 (Windows 10) LOG: 'User ID saved:', '123'
,Firefox 134.0 (Windows 10) LOG: 'Fetched User ID:', '2'
,Firefox 134.0 (Windows 10) LOG: 'Fetched User ID:', null
,Firefox 134.0 (Windows 10) LOG: 'User ID saved:', '456'
,Firefox 134.0 (Windows 10) ERROR: 'Error during login:', HttpErrorResponse{headers: HttpHeaders{normalizedNames: Map{}, lazyUpdate: null, headers: Map{}}, status: 401, statusText: 'Unauthorized', url: 'https://universitysystem-7bcbdef4d122.herokuapp.com/api/v1/auth/login', ok: false, name: 'HttpErrorResponse', message: 'Http failure response for https://universitysystem-7bcbdef4d122.herokuapp.com/api/v1/auth/login: 401 Unauthorized', error: 'Unauthorized'}
,Firefox 134.0 (Windows 10) LOG: 'Fetched Users from API:', [Object{id: '1', name: 'User One', email: 'user1@example.com'}, Object{id: '2', name: 'User Two', email: 'user2@example.com'}]
,Firefox 134.0 (Windows 10) ERROR: 'Error during registration:', HttpErrorResponse{headers: HttpHeaders{normalizedNames: Map{}, lazyUpdate: null, headers: Map{}}, status: 500, statusText: 'Internal Server Error', url: 'https://universitysystem-7bcbdef4d122.herokuapp.com/api/v1/auth/register', ok: false, name: 'HttpErrorResponse', message: 'Http failure response for https://universitysystem-7bcbdef4d122.herokuapp.com/api/v1/auth/register: 500 Internal Server Error', error: 'Internal Server Error'}

]]>
  </system-out>
  <system-err/>
</testsuite>